# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(RISCVM_DIRECT_DISPATCH "" OFF)
option(RISCVM_CODE_ENCRYPTION "" ON)
option(RISCVM_OPCODE_SHUFFLING "" ON)
option(RISCVM_DEBUG_SYSCALLS "" ON)

project(riscvm)

# Target: riscvm
set(riscvm_SOURCES
	riscvm.cpp
	riscvm.h
	shuffled_opcodes.h
	cmake.toml
)

add_executable(riscvm)

target_sources(riscvm PRIVATE ${riscvm_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${riscvm_SOURCES})

if(RISCVM_DIRECT_DISPATCH) # RISCVM_DIRECT_DISPATCH
	target_compile_definitions(riscvm PRIVATE
		DIRECT_DISPATCH
	)
endif()

if(RISCVM_CODE_ENCRYPTION) # RISCVM_CODE_ENCRYPTION
	target_compile_definitions(riscvm PRIVATE
		CODE_ENCRYPTION
	)
endif()

if(RISCVM_OPCODE_SHUFFLING) # RISCVM_OPCODE_SHUFFLING
	target_compile_definitions(riscvm PRIVATE
		OPCODE_SHUFFLING
	)
endif()

if(RISCVM_DEBUG_SYSCALLS) # RISCVM_DEBUG_SYSCALLS
	target_compile_definitions(riscvm PRIVATE
		DEBUG_SYSCALLS
	)
endif()

target_compile_features(riscvm PRIVATE
	cxx_std_17
)

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang-cl
	target_compile_options(riscvm PRIVATE
		"/clang:-fno-jump-tables"
		"/clang:-mno-sse"
	)
endif()

if(MSVC) # msvc
	target_link_options(riscvm PRIVATE
		"/DYNAMICBASE:NO"
		"/INCREMENTAL:NO"
	)
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT riscvm)
endif()

# Target: riscvm-crt0
set(riscvm-crt0_SOURCES
	"lib/crt0.c"
	cmake.toml
)

add_custom_target(riscvm-crt0 SOURCES)

target_sources(riscvm-crt0 PRIVATE ${riscvm-crt0_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${riscvm-crt0_SOURCES})
